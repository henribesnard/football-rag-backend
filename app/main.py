"""
Point d'entr√©e principal de l'application Flask API avec RAG et CDC.
"""
import logging
import os
import time
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, Depends, HTTPException, BackgroundTasks, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
import uvicorn

from app.config import settings
from app.api.routes import api_router
from app.db.qdrant.collections import initialize_collections
from app.cdc import get_cdc_manager
from app.monitoring.metrics import metrics
from app.monitoring.logger import configure_logging, get_logger
from app.monitoring.healthcheck import health_check
from app.services.cache_service import cache_service

# Configuration du logging structur√©
configure_logging()
logger = get_logger(__name__)

# M√©triques globales
request_latency = metrics.histogram(
    "api_request_latency",
    "Temps de r√©ponse des requ√™tes API (secondes)",
    buckets=[0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10]
)

request_count = metrics.counter(
    "api_requests_total",
    "Nombre total de requ√™tes API",
    ["method", "endpoint", "status_code"]
)

# Contexte de d√©marrage/arr√™t pour FastAPI
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestion du cycle de vie de l'application FastAPI.
    Ce contexte est ex√©cut√© au d√©marrage et √† l'arr√™t de l'application.
    """
    # Initialisation des composants au d√©marrage
    logger.info("üöÄ D√©marrage de l'application")
    
    # Initialiser les collections Qdrant
    try:
        initialize_collections()
        logger.info("‚úÖ Collections Qdrant initialis√©es")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation des collections Qdrant: {str(e)}")
    
    # Pr√©chauffer le cache si n√©cessaire
    if settings.CACHE_WARMUP_ENABLED:
        try:
            await cache_service.warmup()
            logger.info("‚úÖ Cache pr√©chauff√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du pr√©chauffage du cache: {str(e)}")
    
    # D√©marrer automatiquement le CDC si configur√© ainsi
    if settings.CDC_ENABLED and settings.get("CDC_AUTO_START", False):
        try:
            cdc_manager = get_cdc_manager()
            if not cdc_manager.is_running:
                logger.info("‚ñ∂Ô∏è D√©marrage automatique du syst√®me CDC")
                # D√©marrer en arri√®re-plan pour ne pas bloquer le d√©marrage de l'app
                background_task = BackgroundTasks()
                background_task.add_task(cdc_manager.start)
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage du CDC: {str(e)}")
    
    # V√©rifier la sant√© des composants
    try:
        health_status = await health_check.check_system_health()
        if health_status["status"] != "healthy":
            logger.warning(f"‚ö†Ô∏è D√©marrage avec √©tat de sant√© non optimal: {health_status['status']}")
            logger.debug(f"D√©tails de sant√©: {health_status}")
        else:
            logger.info("‚úÖ V√©rification de sant√© initiale r√©ussie")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification de sant√© initiale: {str(e)}")
    
    # Ressources pr√™tes, continuer avec le d√©marrage de FastAPI
    yield
    
    # Nettoyage des ressources √† l'arr√™t
    logger.info("üõë Arr√™t de l'application")
    
    # Arr√™ter proprement le CDC si en cours d'ex√©cution
    try:
        cdc_manager = get_cdc_manager()
        if cdc_manager.is_running:
            logger.info("‚èπÔ∏è Arr√™t du syst√®me CDC")
            cdc_manager.stop()
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'arr√™t du CDC: {str(e)}")

# Middleware pour mesurer la latence des requ√™tes et collecter des m√©triques
async def metrics_middleware(request: Request, call_next):
    """
    Middleware pour mesurer la latence des requ√™tes et collecter des m√©triques.
    """
    start_time = time.time()
    
    try:
        response = await call_next(request)
        processing_time = time.time() - start_time
        
        # Enregistrer les m√©triques
        request_latency.observe(processing_time)
        status_code = response.status_code
        
        # Ajouter l'en-t√™te X-Processing-Time
        response.headers["X-Processing-Time"] = f"{processing_time:.6f}"
        
    except Exception as e:
        processing_time = time.time() - start_time
        request_latency.observe(processing_time)
        status_code = 500
        # Cr√©er une r√©ponse d'erreur
        response = Response(
            content=f"Internal Server Error: {str(e)}",
            status_code=status_code
        )
        logger.error(f"Erreur non intercept√©e dans le traitement de la requ√™te: {str(e)}")
    
    # Format de l'endpoint pour les m√©triques (simplifier les chemins variables)
    path = request.url.path
    for param in request.path_params:
        path = path.replace(str(request.path_params[param]), f"{{{param}}}")
    
    # Incr√©menter le compteur de requ√™tes
    request_count.labels(
        method=request.method,
        endpoint=path,
        status_code=status_code
    ).inc()
    
    return response

# Cr√©er l'application FastAPI avec le contexte de cycle de vie
app = FastAPI(
    title=settings.APP_NAME,
    version=settings.APP_VERSION,
    description="API RAG pour les donn√©es de football avec CDC pour la synchronisation des donn√©es",
    lifespan=lifespan,
    docs_url="/docs" if settings.DEBUG else None,  # D√©sactiver Swagger en production si n√©cessaire
    redoc_url="/redoc" if settings.DEBUG else None
)

# Ajouter le middleware CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Ajouter le middleware GZip pour la compression
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Ajouter le middleware de m√©triques
app.middleware("http")(metrics_middleware)

# Inclure les routes de l'API
app.include_router(api_router)

# Point d'extr√©mit√© pour g√©rer le CDC
@app.post("/api/admin/cdc/start", tags=["admin"])
async def start_cdc(background_tasks: BackgroundTasks):
    """D√©marre le syst√®me CDC en t√¢che d'arri√®re-plan."""
    if not settings.CDC_ENABLED:
        raise HTTPException(status_code=400, detail="CDC is disabled in configuration")
    
    cdc_manager = get_cdc_manager()
    if cdc_manager.is_running:
        return {"status": "already_running", "message": "CDC system is already running"}
    
    # D√©marrer le CDC en arri√®re-plan
    background_tasks.add_task(cdc_manager.start)
    return {"status": "starting", "message": "CDC system is starting in the background"}

@app.post("/api/admin/cdc/stop", tags=["admin"])
async def stop_cdc():
    """Arr√™te le syst√®me CDC."""
    cdc_manager = get_cdc_manager()
    if not cdc_manager.is_running:
        return {"status": "not_running", "message": "CDC system is not running"}
    
    cdc_manager.stop()
    return {"status": "stopped", "message": "CDC system has been stopped"}

@app.get("/api/admin/cdc/status", tags=["admin"])
async def cdc_status():
    """Obtient le statut actuel du syst√®me CDC."""
    cdc_manager = get_cdc_manager()
    return cdc_manager.get_status()

@app.get("/metrics", tags=["monitoring"])
async def get_metrics():
    """Endpoint pour exposer les m√©triques au format Prometheus."""
    from prometheus_client import generate_latest, CONTENT_TYPE_LATEST, CollectorRegistry, Counter, Histogram, Gauge
    
    registry = CollectorRegistry()
    
    # Convertir nos m√©triques personnalis√©es au format Prometheus
    # Compteurs
    for name, counter in metrics.counters.items():
        c = Counter(name, counter.description, counter.labels.keys() if hasattr(counter, 'labels') else [], registry=registry)
        c._value.set(counter.value)
    
    # Histogrammes
    for name, histogram in metrics.histograms.items():
        h = Histogram(name, histogram.description, histogram.labels.keys() if hasattr(histogram, 'labels') else [], buckets=histogram.buckets, registry=registry)
        # Pour simplifier, nous ne remplissons pas les buckets ici
        for value in histogram.values:
            h.observe(value)
    
    # Jauges
    for name, gauge in metrics.gauges.items():
        g = Gauge(name, gauge.description, gauge.labels.keys() if hasattr(gauge, 'labels') else [], registry=registry)
        g.set(gauge.value)
    
    # G√©n√©rer les m√©triques au format Prometheus
    return Response(content=generate_latest(registry), media_type=CONTENT_TYPE_LATEST)

# Point d'extr√©mit√© pour la v√©rification de sant√©
@app.get("/health", tags=["monitoring"])
async def health():
    """
    Endpoint de v√©rification de sant√© pour le monitoring.
    Retourne l'√©tat de sant√© de tous les composants du syst√®me.
    """
    health_status = await health_check.check_system_health()
    
    # D√©terminer le code de statut HTTP en fonction de l'√©tat de sant√©
    if health_status["status"] == "healthy":
        status_code = 200
    elif health_status["status"] == "degraded":
        status_code = 200  # Toujours 200 pour degraded pour √©viter les faux positifs
    else:
        status_code = 503  # Service Unavailable
    
    return Response(
        content=json.dumps(health_status),
        media_type="application/json",
        status_code=status_code
    )

# Point d'extr√©mit√© pour un check de vie simple
@app.get("/ping", tags=["monitoring"])
async def ping():
    """
    Simple check de vie pour v√©rifier que l'API r√©pond.
    """
    return {"status": "ok", "timestamp": time.time()}

# Point d'extr√©mit√© racine
@app.get("/", tags=["Base"])
async def root():
    """
    Route racine pour v√©rifier que l'API est fonctionnelle.
    """
    return {
        "message": "API football RAG op√©rationnelle",
        "version": settings.APP_VERSION,
        "documentation": "/docs",
        "health": "/health",
        "metrics": "/metrics"
    }

# Configuration du serveur ASGI pour haute disponibilit√©
def start_server():
    """D√©marre le serveur avec les param√®tres de configuration optimis√©s."""
    # Configuration uvicorn pour haute disponibilit√©
    uvicorn_config = {
        "host": settings.HOST,
        "port": settings.PORT,
        "log_level": "info",
        "workers": settings.WORKERS,  # Nombre de processus de travail
        "loop": "uvloop",  # Boucle d'√©v√©nements plus rapide
        "http": "httptools",  # Parser HTTP plus rapide
        "limit_concurrency": settings.MAX_CONCURRENT_CONNECTIONS,  # Limite de connexions simultan√©es
        "timeout_keep_alive": 5,  # Dur√©e de maintien des connexions inactives
        "proxy_headers": True,  # Support des en-t√™tes de proxy
        "forwarded_allow_ips": settings.FORWARDED_ALLOW_IPS,  # IPs autoris√©es pour les en-t√™tes X-Forwarded-*
    }
    
    # D√©marrer le serveur
    uvicorn.run("app.main:app", **uvicorn_config)

if __name__ == "__main__":
    # Importer ici pour √©viter les probl√®mes d'importation circulaire
    import json
    from fastapi import Response
    start_server()